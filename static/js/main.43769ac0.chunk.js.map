{"version":3,"sources":["variables.js","components/calculator.js","App.js","serviceWorker.js","index.js"],"names":["functions","index","name","symbol","fct","a","b","Math","pow","defaultState","inputOne","inputTwo","result","function","Calculator","props","stripZeroes","str","substring","length","addDigit","event","digit","target","value","toString","update","state","onInputOne","concat","y","setState","removeDigit","targetInput","input","addDecimal","applyFunction","calcResult","x","parseFloat","renderResult","f","r","renderDigitButtons","Array","keys","splice","map","i","Button","className","onClick","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAAMA,EAAY,CACd,CACIC,MAAO,EACPC,KAAM,KACNC,OAAQ,KACRC,IAAK,SAASC,EAAEC,GAAI,OAAO,OAE/B,CACIL,MAAO,EACPC,KAAM,MACNC,OAAQ,IACRC,IAAK,SAASC,EAAEC,GAAI,OAAOD,EAAIC,IAEnC,CACIL,MAAO,EACPC,KAAM,WACNC,OAAQ,IACRC,IAAK,SAASC,EAAEC,GAAI,OAAOD,EAAIC,IAEnC,CACIL,MAAO,EACPC,KAAM,WACNC,OAAQ,IACRC,IAAK,SAASC,EAAEC,GAAI,OAAOD,EAAIC,IAEnC,CACIL,MAAO,EACPC,KAAM,SACNC,OAAQ,IACRC,IAAK,SAASC,EAAEC,GAAI,OAAOD,EAAIC,IAEnC,CACIL,MAAO,EACPC,KAAM,WACNC,OAAQ,IACRC,IAAK,SAASC,EAAEC,GAAI,OAAOC,KAAKC,IAAIH,EAAGC,MAIzCG,EAAe,CACnBC,SAAU,GACVC,SAAU,KACVC,OAAQ,KACRC,SAAUb,EAAU,GACpBA,UAAWA,GCyDEc,E,kDAhGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,YAAc,SAACC,GACb,MAAc,KAAVA,EAAI,GACC,EAAKD,YAAYC,EAAIC,UAAU,EAAED,EAAIE,SACvCF,GAVU,EAYnBG,SAAW,SAACC,GACV,IAAIC,EAAQD,EAAME,OAAOC,MAAMC,WAC3BC,EAAS,GAEb,GAAyB,MAArB,EAAKC,MAAMf,QACbc,EAASjB,GACFC,SAAWY,OACb,GAAI,EAAKM,aACdF,EAAOhB,SAAW,EAAKM,YAAY,EAAKW,MAAMjB,SAASmB,OAAOP,QACzD,CACL,IAAIQ,EAAI,EAAKH,MAAMhB,SACV,MAALmB,IACFA,EAAI,IACNJ,EAAOf,SAAW,EAAKK,YAAYc,EAAED,OAAOP,IAE9C,EAAKS,SAASL,IA3BG,EA6BnBM,YAAc,WACZ,IAAIN,EAAS,GACTO,EAAc,WACd,EAAKL,eACPK,EAAc,YAChB,IAAIC,EAAQ,EAAKP,MAAMM,GACvBP,EAAOO,GAAeC,EAAMhB,UAAU,EAAEgB,EAAMf,OAAS,GACvD,EAAKY,SAASL,IApCG,EAsCnBS,WAAa,WACX,IAAIT,EAAS,GACTO,EAAc,WACd,EAAKL,eACPK,EAAc,YAChB,IAAIC,EAAQ,EAAKP,MAAMM,GACvBP,EAAOO,GAAeC,EAAML,OAAO,KACnC,EAAKE,SAASL,IA7CG,EA+CnBU,cAAgB,SAACf,GACf,EAAKU,SAAS,CAAClB,SAAS,EAAKc,MAAM3B,UAAUqB,EAAME,OAAOC,UAhDzC,EAkDnBa,WAAa,WACX,IAAIC,EAAIC,WAAW,EAAKZ,MAAMjB,UAC1BoB,EAAIS,WAAW,EAAKZ,MAAMhB,UAC1BC,EAAS,EAAKe,MAAMd,SAAST,IAAIkC,EAAER,GACvC,EAAKC,SAAS,CAACnB,OAAOA,KAtDL,EAwDnB4B,aAAe,WACb,IAAIF,EAAI,EAAKX,MAAMjB,SACfoB,EAAI,EAAKH,MAAMhB,SACf8B,EAAI,EAAKd,MAAMd,SAASV,OACxBuC,EAAI,EAAKf,MAAMf,OACnB,OAAO,8BAAO0B,EAAP,IAAgB,MAALG,GAAaA,EAAxB,IAAiC,MAALX,GAAaA,EAAzC,IAAkD,MAALY,GAAa,KAAOA,IA7DvD,EA+DnBC,mBAAqB,WACnB,OAAO,YAAIC,MAAM,IAAIC,QAAQC,OAAO,EAAE,IAAIC,KAAI,SAAAC,GAAC,OAC7C,8BACE,kBAACC,EAAA,EAAD,CAAQC,UAAU,cAAcC,QAAS,EAAK/B,SAAUI,MAAOwB,GAAIA,GAClEA,EAAI,GAAK,GAAK,kCAjEnB,EAAKrB,MAAQlB,EAFI,E,yDAKjB,OAAqC,MAA9B2C,KAAKzB,MAAMd,SAASV,S,+BAoE3B,OACE,6BACGiD,KAAKZ,eACN,6BACA,yBAAKU,UAAU,uBACZE,KAAKT,qBACN,kBAACM,EAAA,EAAD,CAAQC,UAAU,cAAcC,QAASC,KAAKhC,SAAUI,MAAO,GAA/D,MAEF,yBAAK0B,UAAU,kBACb,kBAACD,EAAA,EAAD,CAAQC,UAAU,cAAcC,QAASC,KAAKpB,aAA9C,UACA,kBAACiB,EAAA,EAAD,CAAQC,UAAU,cAAcC,QAASC,KAAKf,YAA9C,KAAoE,6BACpE,kBAACY,EAAA,EAAD,CAAQC,UAAU,cAAcC,QAASC,KAAKhB,cAAeZ,MAAO,GAApE,KACA,kBAACyB,EAAA,EAAD,CAAQC,UAAU,cAAcC,QAASC,KAAKhB,cAAeZ,MAAO,GAApE,KAAiF,6BACjF,kBAACyB,EAAA,EAAD,CAAQC,UAAU,cAAcC,QAASC,KAAKhB,cAAeZ,MAAO,GAApE,KACA,kBAACyB,EAAA,EAAD,CAAQC,UAAU,cAAcC,QAASC,KAAKhB,cAAeZ,MAAO,GAApE,KAAiF,6BACjF,kBAACyB,EAAA,EAAD,CAAQC,UAAU,cAAcC,QAASC,KAAKhB,cAAeZ,MAAO,GAApE,KACA,kBAACyB,EAAA,EAAD,CAAQC,UAAU,cAAcC,QAASC,KAAKjB,WAAYX,MAAO,GAAjE,KAA8E,mC,GA1F/D6B,aCSVC,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,QCIcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.43769ac0.chunk.js","sourcesContent":["const functions = [\n    {\n        index: 0, \n        name: null, \n        symbol: null, \n        fct: function(a,b) {return null},\n    },\n    {\n        index: 1,\n        name: 'add',\n        symbol: '+',\n        fct: function(a,b) {return a + b},   \n    },\n    {\n        index: 2,\n        name: 'subtract',\n        symbol: '-',\n        fct: function(a,b) {return a - b},  \n    },\n    {\n        index: 3,\n        name: 'multiply',\n        symbol: '*',\n        fct: function(a,b) {return a * b},  \n    },\n    {\n        index: 4,\n        name: 'divide',\n        symbol: '/',\n        fct: function(a,b) {return a / b},    \n    },\n    {\n        index: 5,\n        name: 'exponent',\n        symbol: '^',\n        fct: function(a,b) {return Math.pow(a, b)},    \n    }\n];\n\nconst defaultState = {\n  inputOne: \"\",\n  inputTwo: null,\n  result: null,\n  function: functions[0],\n  functions: functions\n};\n\nexport {functions};\nexport {defaultState};","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport {functions, defaultState} from '../variables';\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = defaultState;\n  }\n  onInputOne() {\n    return this.state.function.symbol == null;\n  }\n  stripZeroes = (str) => {\n    if (str[0] == '0')\n      return this.stripZeroes(str.substring(1,str.length));\n    return str;\n  }\n  addDigit = (event) => {\n    let digit = event.target.value.toString();\n    let update = {};\n\n    if (this.state.result != null) {\n      update = defaultState;\n      update.inputOne = digit;\n    } else if (this.onInputOne()) {\n      update.inputOne = this.stripZeroes(this.state.inputOne.concat(digit));\n    } else {\n      let y = this.state.inputTwo;\n      if (y == null)\n        y = \"\";\n      update.inputTwo = this.stripZeroes(y.concat(digit));\n    }\n    this.setState(update);\n  }\n  removeDigit = () => {\n    let update = {};\n    let targetInput = \"inputTwo\";\n    if (this.onInputOne()) \n      targetInput = \"inputOne\";\n    let input = this.state[targetInput];\n    update[targetInput] = input.substring(0,input.length - 1);\n    this.setState(update);\n  }\n  addDecimal = () => {\n    let update = {};\n    let targetInput = \"inputTwo\";\n    if (this.onInputOne()) \n      targetInput = \"inputOne\";\n    let input = this.state[targetInput];\n    update[targetInput] = input.concat('.');\n    this.setState(update);\n  }\n  applyFunction = (event) => {\n    this.setState({function:this.state.functions[event.target.value]});\n  }\n  calcResult = () => {\n    let x = parseFloat(this.state.inputOne);\n    let y = parseFloat(this.state.inputTwo);\n    let result = this.state.function.fct(x,y);\n    this.setState({result:result});\n  }\n  renderResult = () => {\n    let x = this.state.inputOne;\n    let y = this.state.inputTwo;\n    let f = this.state.function.symbol;\n    let r = this.state.result;\n    return <span>{x} {f != null && f} {y != null && y} {r != null && '= ' + r}</span>;\n  }\n  renderDigitButtons = () => {\n    return [...Array(10).keys()].splice(1,10).map(i => \n      <span>\n        <Button className=\"calc-button\" onClick={this.addDigit} value={i}>{i}</Button>\n        {i % 3 == 0 && <br/>}\n      </span>\n    );\n  }\n\n  render () {\n    return (\n      <div>\n        {this.renderResult()}\n        <br/>\n        <div className=\"d-inline-block mr-2\">\n          {this.renderDigitButtons()}\n          <Button className=\"calc-button\" onClick={this.addDigit} value={0}>0</Button>\n        </div>\n        <div className=\"d-inline-block\">\n          <Button className=\"calc-button\" onClick={this.removeDigit}>&larr;</Button>\n          <Button className=\"calc-button\" onClick={this.calcResult}>=</Button><br/>\n          <Button className=\"calc-button\" onClick={this.applyFunction} value={1}>+</Button>\n          <Button className=\"calc-button\" onClick={this.applyFunction} value={2}>-</Button><br/>\n          <Button className=\"calc-button\" onClick={this.applyFunction} value={3}>*</Button>\n          <Button className=\"calc-button\" onClick={this.applyFunction} value={4}>/</Button><br/>\n          <Button className=\"calc-button\" onClick={this.applyFunction} value={5}>^</Button>\n          <Button className=\"calc-button\" onClick={this.addDecimal} value={4}>.</Button><br/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Calculator from './components/calculator.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}